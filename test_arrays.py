import arrays
import logging
import random

logging.basicConfig(level=logging.DEBUG)


def test_bin_search():
    A = [1, 3, 5, 6]
    assert arrays.bin_search(A, 5) == 2
    assert arrays.bin_search(A, 2) == 1
    assert arrays.bin_search(A, 7) == 4
    assert arrays.bin_search(A, 0) == 0
    assert arrays.bin_search([1], 1) == 0


def test_unique_numbers():
    # arrange
    A = [1,2,1,3,4,3]
    k = 3
    # act
    actual = arrays.unique_numbers(A, k)
    expected = [2,3,3,2]
    # assert
    assert actual == expected
    

def test_set_zeros():
    # arrange
    A = [[1,0,1],
         [1,1,1],
         [1,0,1]]
    actual = arrays.set_zeros(A)
    expected = [[0,0,0],
                [1,0,1],
                [0,0,0]]
    assert actual == expected
    # arrange
    A = [[1,0],
         [1,1]]
    actual = arrays.set_zeros(A)
    expected = [[0,0],
                [1,0]]
    assert actual == expected


def test_merge_overlaps():
    # arrange
    intervals = [(1, 3), (2, 6), (8, 10), (15, 18)]
    # act
    actual = arrays.merge_overlaps(intervals)
    expected = [(1, 6), (8, 10), (15, 18)]
    # assert
    assert expected == actual
    # arrange
    intervals = [(1, 10), (2, 9), (3, 8), (4, 7), (5, 6), (6, 6)]
    expected = [(1, 10)]
    actual = arrays.merge_overlaps(intervals)
    assert expected == actual


def test_count_unique_permutations():
    assert arrays.count_unique_permutations([1, 1, 1, 3]) == 4
    assert arrays.count_unique_permutations(list(range(4))) == 24


def test_permute():
    # arrange
    A = [1, 1, 2]
    # act
    p = arrays.permute(A)
    # assert
    assert sorted(p) == [[1, 1, 2], [1, 2, 1], [2, 1, 1]]


def test_min_jumps():
    assert arrays.min_jumps([2, 3, 1, 1, 4]) == 2
    assert arrays.min_jumps([33, 21, 50, 0, 0, 46, 34, 3, 0, 12, 33, 0, 31, 37, 15, 17, 34, 18, 0, 4, 12, 41, 18, 35, 37, 34, 0, 47, 0, 39, 32, 49, 5, 41, 46, 26, 0, 2, 49, 35, 4, 19, 2, 27, 23, 49, 19, 38, 0, 33, 47, 1, 21, 36, 18, 33, 0, 1, 0, 39, 0, 22, 0, 9, 36, 45, 31, 4, 14, 48, 2, 33, 0, 39, 0, 37, 48, 44, 0, 11, 24, 16, 10, 23, 22, 41, 32, 14, 22, 16, 23, 38, 42, 16, 15, 0, 39, 23, 0, 42, 15, 25, 0, 41, 2, 48, 28]) == 3


def test_celebrity():
    # arrange
    N = random.randint(9, 99)
    guests = list(range(N))
    celeb_idx = random.randint(0, N-1)
    # act
    no_celeb = arrays.celebrity(guests, lambda i, j: True if i == j else False)
    celeb = arrays.celebrity(guests, lambda i, j: True if i == j or j == celeb_idx else False)
    # assert
    assert celeb == celeb_idx
    assert no_celeb == -1


def test_triangles():
    assert arrays.triangles([1, 1, 1, 2, 2]) == 4


def test_equal():
    assert arrays.equal([3, 4, 7, 1, 2, 9, 8]) == [0, 2, 3, 5]
    assert arrays.equal([1, 1, 1, 1, 1]) == [0, 1, 2, 3]


def test_bulbs():
    assert arrays.bulbs([0, 1, 0, 1]) == 4


def test_highest_product():
    assert arrays.highest_product([0, -1, 3, 100, -70, -50]) == 350000


def test_candies():
    assert arrays.candies([1, 2]) == 3
    assert arrays.candies([-255, 369, 319, 77, 128]) == 9
    assert arrays.candies([-255, 369, 319, 77, 128, -202, -147, 282,
                           -26, -489, -443, -401, 385, 465, -134, 126, 304, 179, 16, 112,
                           473, -467, 279, -233, 66, 76, 408, 148, -369, 328, 138, -164, 492,
                           -276, -326, 170, 168, 189, 13, 383, 341, 426, 219, 337, -62, -197,
                           263, 338, -324, 261, 273, -74, -8, -133, 318, -100, 487, -196,
                           -465, -495, -136, 94, -201, 491, 204, 323, 156, -337, -99, 115,
                           179, 184, -249, 76, -396, 265, 500, -83, 270, 438, -418, 401,
                           -184, -247, -203, 190, 191, -282, -248, 465, 146, 7, -381, 326,
                           -409, 474, 186, -206, 447, 17, 156, -273, 381, -307, -206, 164,
                           -147, 58, -224, 284, 204, 267, 123, 141, -8, 225, -246, 12, 399,
                           -261, -104, 191, 390, 152, 313, -91, 8, -476, -363, -183, -280,
                           -282, -431, 366, 89, -166, -257, 132, 98, -387, 389, -219, -332,
                           227, 386, -33, 361, -308, -494, -33, 110, 423, -465, -417, 496,
                           -333, -259, 402, 36, 380, -385, -329, 283, 389, 396, -161, 466,
                           -405, -293, 442, 259, 377, -386, -386, 329, 204, 438, 346, -185,
                           -401, -219, 213, 351, -18, -20, 364, 319, 187, 197, 122, -182,
                           -126, -211, -448, 44, -360, -345, -147, 480, -387, 222, 92, -262,
                           -409, 163, 323, -291, -61, -431, -288, -309, -490, -494, 328,
                           -207, 398, 475, -228, -37, 44, 227, -371, -91, -440, 220, 39, -73,
                           80, -189, 37, 94, -96, -400, -380, 172, -179, -442, -119, 411,
                           -184, 218, -18, 170, 430, -157, 345, 418, 390, -39, -85, 216,
                           -197, -421, 328, -311, 160, 432, 104, -419, -140, -115, -202, 58,
                           415, 473, -87, 475, 430, 114, -314, 430, -419, 375, 258, 255, 42,
                           -63, 54, -352, -337, -180, -31, 441, -382, -176, 209, -137, 171,
                           -89, 155, 421, 308, -153, 254, -210, -245, 373, -435, -29, -398,
                           326, 297, 81, -157, 254, 52, 479, 356, -497, -16, 109, -353, -20,
                           -122, -172, 23, 20, -344, 203, 372, -306, -9, 238, -190, 495, 9,
                           -2, 125, 150, -180, -340, -1, -347, -269, -181, -15, 83, -304,
                           -365, 490, -475, 161, 422, 440, -414, 380, -446, -404, -352, -144,
                           -297, -62, -23, -223, 359, 127, 183, -20, 93, -285, -477, 223, 1,
                           131, -359, -74, 321, 197, 452, -338, 367, -337, 183, -41, 218,
                           -75, -212, 208, 188, -38, 91, 332, 388, -185, -247, 405, -390,
                           -371, 313, -471, 457, 307, 494, -467, -225, -3, -271, -164, -120,
                           101, 385, -12, 234, -368, -317, 167, 241, -494, -279, -288, 452,
                           -499, 372, 464, 234, 16, 40, 264, -474, -400, 429, 33, 495, -285,
                           201, 190, 328, 127, 286, 312, 100, -24, 409, -392, 183, -69, -352,
                           -56, -304, -261, -296, -140, 453, 253, -215, 195, 288, -300, 10,
                           -104, -491, 275, -275, 175, 24, 387, 408]) == 930


def test_max_sub_array():
    # arrange
    A = [1, 2, 3, 4, -10]
    expected = 10
    # act
    actual = arrays.max_sub_array(A)
    # assert
    assert actual == 10
    # arrange
    A = [-2, 1, -3, 4, -1, 2, 1, -5, 4]
    expected = 6
    # act
    actual = arrays.max_sub_array(A)
    # assert
    assert actual == expected
    # arrange
    A = [ -120, -202, -293, -60, -261, -67, 10, 82, -334, -393, -428, -182, -138, -167, -465, -347, -39, -51, -61, -491, -216, -36, -281, -361, -271, -368, -122, -114, -53, -488, -327, -182, -221, -381, -431, -161, -59, -494, -406, -298, -268, -425, -88, -320, -371, -5, 36, 89, -194, -140, -278, -65, -38, -144, -407, -235, -426, -219, 62, -299, 1, -454, -247, -146, 24, 2, -59, -389, -77, -19, -311, 18, -442, -186, -334, 41, -84, 21, -100, 65, -491, 94, -346, -412, -371, 89, -56, -365, -249, -454, -226, -473, 91, -412, -30, -248, -36, -95, -395, -74, -432, 47, -259, -474, -409, -429, -215, -102, -63, 80, 65, 63, -452, -462, -449, 87, -319, -156, -82, 30, -102, 68, -472, -463, -212, -267, -302, -471, -245, -165, 43, -288, -379, -243, 35, -288, 62, 23, -444, -91, -24, -110, -28, -305, -81, -169, -348, -184, 79, -262, 13, -459, -345, 70, -24, -343, -308, -123, -310, -239, 83, -127, -482, -179, -11, -60, 35, -107, -389, -427, -210, -238, -184, 90, -211, -250, -147, -272, 43, -99, 87, -267, -270, -432, -272, -26, -327, -409, -353, -475, -210, -14, -145, -164, -300, -327, -138, -408, -421, -26, -375, -263, 7, -201, -22, -402, -241, 67, -334, -452, -367, -284, -95, -122, -444, -456, -152, 25, 21, 61, -320, -87, 98, 16, -124, -299, -415, -273, -200, -146, -437, -457, 75, 84, -233, -54, -292, -319, -99, -28, -97, -435, -479, -255, -234, -447, -157, 82, -450, 86, -478, -58, 9, -500, -87, 29, -286, -378, -466, 88, -366, -425, -38, -134, -184, 32, -13, -263, -371, -246, 33, -41, -192, -14, -311, -478, -374, -186, -353, -334, -265, -169, -418, 63, 77, 77, -197, -211, -276, -190, -68, -184, -185, -235, -31, -465, -297, -277, -456, -181, -219, -329, 40, -341, -476, 28, -313, -78, -165, -310, -496, -450, -318, -483, -22, -84, 83, -185, -140, -62, -114, -141, -189, -395, -63, -359, 26, -318, 86, -449, -419, -2, 81, -326, -339, -56, -123, 10, -463, 41, -458, -409, -314, -125, -495, -256, -388, 75, 40, -37, -449, -485, -487, -376, -262, 57, -321, -364, -246, -330, -36, -473, -482, -94, -63, -414, -159, -200, -13, -405, -268, -455, -293, -298, -416, -222, -207, -473, -377, -167, 56, -488, -447, -206, -215, -176, 76, -304, -163, -28, -210, -18, -484, 45, 10, 79, -441, -197, -16, -145, -422, -124, 79, -464, -60, -214, -457, -400, -36, 47, 8, -151, -489, -327, 85, -297, -395, -258, -31, -56, -500, -61, -18, -474, -426, -162, -79, 25, -361, -88, -241, -225, -367, -440, -200, 38, -248, -429, -284, -23, 19, -220, -105, -81, -269, -488, -204, -28, -138, 39, -389, 40, -263, -297, -400, -158, -310, -270, -107, -336, -164, 36, 11, -192, -359, -136, -230, -410, -66, 67, -396, -146, -158, -264, -13, -15, -425, 58, -25, -241, 85, -82, -49, -150, -37, -493, -284, -107, 93, -183, -60, -261, -310, -380 ]
    expected = 217
    # act
    actual = arrays.max_sub_array(A)
    # assert
    assert actual == expected


def test_first_missing_positive():
    assert arrays.first_missing_positive([1,2,0]) == 3
    assert arrays.first_missing_positive([3,4,-1,1]) == 2
    assert arrays.first_missing_positive([-8,-7,-6]) == 1
